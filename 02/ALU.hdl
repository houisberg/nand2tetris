// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // 定数0
        Mux16(a=x, b=false, sel=zx, out=xis0);  // if (zx == 1) set x = 0
        Mux16(a=y, b=false, sel=zy, out=yis0);  // if (zy == 1) set y = 0

        // 反転
        Not16(in=xis0, out=unx);
        Mux16(a=xis0, b=unx, sel=nx, out=notx);
        Not16(in=yis0, out=uny);
        Mux16(a=yis0, b=uny, sel=ny, out=noty);

        // Andまたは加算 ...(1)
        And16(a=notx, b=noty, out=xandy);
        Add16(a=notx, b=noty, out=xplusy);

        // fをもとに(1)のどちらを使うか判定 ...(2)
        Mux16(a=xandy, b=xplusy, sel=f, out=foutput);

        // noをもとに(2)を反転するか判定 ...(3)
        Not16(in=foutput, out=notfoutput);
        Mux16(a=foutput, b=notfoutput, sel=no, out=outresult, out[0..7]=out0to7, out[8..15]=out8to15, out[15]=out15);
        
        // outがゼロであるか判定(8桁ずつ)
        // inputに入れる8ビット→配列の範囲をここで直接指定するとエラーとなるため、(3)の最後でついでに変数宣言しておく
        Or8Way(in=out0to7, out=anyin0to7);
        Or8Way(in=out8to15, out=anyin8to15);
        Or(a=anyin0to7, b=anyin8to15, out=zr);

        // outが負であるか判定
        Mux(a=false, b=true, sel=out15, out=ng);

        // out出力
        And16(a=true, b=outresult, out=out);
}