// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // instructionがA命令かC命令か
        And(a=true, b=instruction[15], out=instIsC);
        Not(in=instIsC, out=instIsA);

        // Aレジスタに送るのはALU出力か入力の命令文か
        Mux16(a=instruction, b=ALUout, sel=instIsC, out=mux1out);
        
        // A命令またはd1=1ならAレジスタ読み込み
        Or(a=instIsA, b=instruction[5], out=loadA);
        ARegister(in=mux1out, load=loadA, out=ARegout, out[0..14]=addressM);
        
        // ALUはaビットが0ならAレジスタ、1ならメモリ入力を操作
        Mux16(a=ARegout, b=inM, sel=instruction[12], out=mux2out);
        
        // C命令かつd2=1ならDレジスタ読み込み
        And(a=instIsC, b=instruction[4], out=loadD);  
        DRegister(in=ALUout, load=loadD, out=DRegout);
        
        
        ALU(x=DRegout, 
            y=mux2out, 
            zx=instruction[11], 
            nx=instruction[10], 
            zy=instruction[9], 
            ny=instruction[8], 
            f=instruction[7], 
            no=instruction[6], 
            out=ALUout,
            out=outM,
            zr=zr, 
            ng=ng
        );

        // C命令かつd3=1ならメモリ読み込み
        And(a=instIsC, b=instruction[3], out=writeM);  

        // PCへのloadをjビットで判断
        // j1=1 && out < 0 -> 1
        And(a=ng, b=instruction[2], out=j1true);
        // j2=1 && out = 0 -> 1
        And(a=zr, b=instruction[1], out=j2true);
        // j3=1 && out > 0 -> 1
        Or(a=ng, b=zr, out=notpos);
        Not(in=notpos, out=pos);
        And(a=pos, b=instruction[0], out=j3true);

        // A命令、もしくはjump領域がnull(j1,j2,j3とも0)ならインクリメント
        // それ以外はPCに移動を指示
        Or(a=j1true, b=j2true, out=j1orj2true);
        Or(a=j1orj2true, b=j3true, out=j1orj2orj3true);
        And(a=instIsC, b=j1orj2orj3true, out=pcLoad);
        Not(in=pcLoad, out=pcInc);
        PC(in=ARegout, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);
}